{% raw %}
#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

optstring=":hvifCAqd:"

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-i] [-f] [-C] -[A] [-q] [-d directory ] -- [arg1, arg2...]

Helper utility to keep your development environment pristine and productive.

Available options:

-h  Print this help and exit
-v  Print script debug info
-i  Install ansible-galaxy dependencies
-f  Purge existing setup directory and clean install everything
        this runs: 'curl -sSL https://go.gordian.sh | bash -'
-d  Directory to install setup script to
        default: $HOME/Development/GitHub/setup
-A  Run all tasks
-q  Quiet output from ansible
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

parse_params() {
  force=0
  install=0
{% endraw %}
  directory="{{ ansible_script_dir }}"
{% raw %}
  ansible_callback=default
  baseargs=()
  extraargs=()
  set +u
  while getopts "$optstring" opt; do
    case $opt in
    h) usage ;;
    v)
      set -x
      ansible_callback=minimal
      ;;
    C) NO_COLOR=1 ;;
    i) install=1 ;;
    f) force=1 ;;
    A) extraargs+=(--tags all) ;;
    d) directory="$OPTARG" ;;
    q) ansible_callback=dense ;;
    ?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
  done
  last=
  if [ "$OPTIND" -ge 2 ]; then
    shift "$((OPTIND - 2))"
    last=$1
    shift 1
  else
    shift "$((OPTIND - 1))"
  fi
  baseargs+=(main.yml --ask-become-pass)
  extraargs+=("$@")

  # check required params and arguments
  [[ ${#extraargs[@]} -eq 0 ]] && extraargs=(--tags xip)
  [[ -z "${directory}" ]] && die "${RED}No directory provided!${NOFORMAT}"
  [[ ! -d "${directory}" ]] && die "${RED}Not a valid directory: ${directory}"
  args=("${baseargs[*]-}" "${extraargs[*]-}")
  return 0
}


parse_params "$@"
setup_colors

clean_install() {
    msg "${RED}--reinstall is a DESTRUCTIVE ACTION${NOFORMAT}"
    read -r -p "Proceed with reinstall? [y/N] " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            rm -rf "${directory}"
            msg "curl -sSL https://go.gordian.sh | bash -"
            ;;
        *)
            die "reinstall aborted"
            ;;
    esac
}

[[ "${force}" -eq 1 ]] && clean_install

pushd "${directory}"
git pull
if [ "${install}" -eq 1 ]; then 
    msg "${BLUE}ansible-galaxy installing dependencies${NOFORMAT}"
    ansible-galaxy install -r requirements.yml
fi
msg "${BLUE}running install: ${args[*]}${NOFORMAT}\n"
ANSIBLE_STDOUT_CALLBACK="${ansible_callback}" ansible-playbook ${args[*]-} ${finalargs[*]-}
popd

msg "${GREEN}environment setup complete${NOFORMAT}"
{% endraw %}