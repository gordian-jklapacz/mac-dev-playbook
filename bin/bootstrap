#!/usr/bin/env bash
set -uo pipefail
PATH_OVERRIDE="$HOME/Library/Python/3.8/bin:/opt/homebrew/bin:$PATH"

function yell () 
{ 
  echo "$0: $*" >&2
}

function die () 
{ 
  yell "$*"; exit 111
}

function try () 
{ 
  "$@" || die "cannot $*" 
}

function pushd () {
    command pushd "$@" > /dev/null
}

function popd () {
    command popd "$@" > /dev/null
}

function rosetta() {
  yell "[Rosetta] Checking"
  uname -m | grep arm64
  arm=$?
  if [[ "$arm" -eq 1 ]]; then
    yell "[Rosetta]: Non-Apple Silicon; skipping..."
    return 0
  fi
  /usr/bin/pgrep -q oahd && yell "[Rosetta] Rosetta installed; skipping..." && return 0
  yell "[Rosetta] Rosetta not found... installing"
  try /usr/sbin/softwareupdate --install-rosetta --agree-to-license
}

function check-until-done() {
  xcode_lockfile=/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  exists=$(test -f $xcode_lockfile)
  while [[ $exists -eq 1 ]] || [[ -f $xcode_lockfile ]]
  do
    yell "Command Line Tools installation in progress..."
    sleep 30
  done
}

function xcode() {
  yell "[xcode] Checking"
  xcode-select -p 1>/dev/null
  xcode_installed=$?
  if [[ $xcode_installed -eq 2 ]]; then
    (try xcode-select --install &)
    sleep 5
    check-until-done
  else
    yell "[xcode] Command Line Tools already installed; skipping..."
  fi
}

function install-ansible() {
  export PATH="$PATH_OVERRIDE"
  yell "Checking ansible"
  [[ "$(ansible --version 1>/dev/null 2>/dev/null)" -eq 0 ]] && yell "ansible already installed; skipping..." && return 0
  try sudo /usr/bin/pip3 install --upgrade pip
  try /usr/bin/pip3 install ansible
}

function install() {
  export PATH="$PATH_OVERRIDE"
  dev_dir="$HOME/Development/GitHub"
  mkdir -p "${dev_dir}"
  setup_dir="${dev_dir}/setup"
  [[ -d "${setup_dir}" ]] || git clone https://github.com/gordian-jklapacz/mac-dev-playbook "${setup_dir}"
  pushd "${setup_dir}"
    die "installing!"
    #./bin/apply
  popd
}

rosetta
xcode
#install-ansible
#yell "--- Prerequisites Satisfied ---"
#yell "args: $*"
#install
