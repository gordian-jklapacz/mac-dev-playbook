#!/bin/sh

{ # Prevent execution if this script was only partially downloaded
  oops() {
    echo "$0:" "$@" >&2
    exit 1
  }

  umask 0022

  tmpDir="$(mktemp -d -t xip-binary-tarball-unpack.XXXXXXXXXX ||
    oops "Can't create temporary directory for downloading the Xip binary tarball")"
  cleanup() {
    echo rm -rf "$tmpDir"
  }
  trap cleanup EXIT INT QUIT TERM

  require_util() {
    command -v "$1" >/dev/null 2>&1 ||
      oops "you do not have '$1' installed, which I need to $2"
  }

  case "$(uname -s).$(uname -m)" in
  Darwin.x86_64)
    path=xip-0.0.3-darwin-amd64.tar.gz
    system=x86_64-darwin
    ;;
  Darwin.arm64 | Darwin.aarch64)
    path=xip-0.0.3-darwin-arm64.tar.gz
    system=aarch64-darwin
    ;;
  *) oops "sorry, there is no binary distribution of Nix for your platform" ;;
  esac

  # Use this command-line option to fetch the tarballs using nar-serve or Cachix
  if [ "${1:-}" = "--tarball-url-prefix" ]; then
    if [ -z "${2:-}" ]; then
      oops "missing argument for --tarball-url-prefix"
    fi
    url=${2}/${path}
    shift 2
  else
    url=https://github.com/gordian-jklapacz/xip/releases/download/0.0.3/$path
  fi

  tarball=$tmpDir/$path

  require_util tar "unpack the binary tarball"
  if [ "$(uname -s)" != "Darwin" ]; then
    require_util xz "unpack the binary tarball"
  fi

  if command -v curl >/dev/null 2>&1; then
    fetch() { curl --fail -L "$1" -o "$2"; }
  elif command -v wget >/dev/null 2>&1; then
    fetch() { wget "$1" -O "$2"; }
  else
    oops "you don't have wget or curl installed, which I need to download the binary tarball"
  fi

<<<<<<< HEAD
  echo "downloading Xip 0.0.3 binary tarball for $system from '$url' to '$tmpDir'..."
  fetch "$url" "$tarball" || oops "failed to download '$url'"

  unpack=$tmpDir/unpack
  mkdir -p "$unpack"
  tar -xJf "$tarball" -C "$unpack" || oops "failed to unpack '$url'"

  script=$(echo "$unpack"/xip)
=======
function install-ansible() {
  export PATH="$PATH_OVERRIDE:$PATH"
  yell "[ansible] Checking..."
  ansible --version 1>/dev/null 2>/dev/null
  ansible_installed=$?
  if [[ $ansible_installed -eq 0 ]]; then
    yell "[ansible] ansible already installed; skipping..."
    return 0
  fi
  try sudo /usr/bin/pip3 install --upgrade pip
  try /usr/bin/pip3 install ansible
}

function install() {
  export PATH="$PATH_OVERRIDE:$PATH"
  dev_dir="$HOME/Development/GitHub"
  setup_dir="${dev_dir}/setup"

  yell "[install] cloning setup repo: (target=${setup_dir})"

  mkdir -p "${dev_dir}"

  if [[ ! -d "${setup_dir}" ]]; then
    git clone -q https://github.com/gordian-jklapacz/mac-dev-playbook "${setup_dir}"
  fi

  venv_activate="${setup_dir}/.venv/bin/activate"

  pushd "${setup_dir}"
  if [[ -f "${venv_activate}" ]]; then
    yell "[install] activating virtual environment"
    source "${venv_activate}"
  fi

  read -s -p "Enter encryption key: (default: '')\n" x
  if [[ -n "$x" ]]; then
    printf "$x\n" >"$HOME/.ansible-vault"
    export ANSIBLE_VAULT_PASSWORD_FILE="$HOME/.ansible-vault"
    yell "[install] ansible-vault encryption key saved"
  fi

  yell "[install] installing ansible dependencies"
  ansible-galaxy install -r requirements.yml
  ansible-playbook main.yml --ask-become-pass
  popd
}
>>>>>>> 824ed2bf0fa56df7cda21bbb918023f1f4e78aa8

  [ -e "$script" ] || oops "installation script is missing from the binary tarball!"
  export INVOKED_FROM_INSTALL_IN=1
  if [[ -n "$@" ]]; then
    "$script" check rosetta "$@"
  else
    "$script" "$@"
  fi
} # End of wrapping
